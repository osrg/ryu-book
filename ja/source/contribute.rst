.. _ch_contribute:

コントリビューション
======================

オープンソース・ソフトウェアの醍醐味の一つは、自ら開発に参加できることでしょう。
この章では、Ryuの開発に参加する方法について紹介します。

開発体制
--------

Ryuの開発はメーリングリストを中心に進められています。
まずはメーリングリストに参加することから始めましょう。

ryu-devel@lists.sourceforge.net

メーリングリストでのやり取りは、基本的に英語で行われます。
使い方などで疑問があったり、不具合と思われるような挙動に遭遇した際には、
メールを送ることをためらう必要はありません。
オープンソース・ソフトウェアを使うこと自体が、プロジェクトにとって
重要なコントリビューションだからです。

開発環境
----------------

このセクションでは、Ryuの開発で必要な環境と留意事項について説明します。

Python
^^^^^^^^^^^^^^^^

RyuはPython 2.6以上をサポートしています。
すなわち、Python 2.7でのみ使用可能な構文などは使ってはいけません。

Python 3.0以上については、今のところサポートされていません。
ですが、ソースコードは将来的な変更がなるべく少なく済むような記述を
心がけると良いでしょう。

コーディングスタイル
^^^^^^^^^^^^^^^^

RyuのソースコードはPEP8というコーディングスタイルに準拠しています。
後述するパッチの送付の際には、その内容がPEP8に準拠していることを
あらかじめ確認してください。

http://www.python.org/dev/peps/pep-0008/

尚、ソースコードがPEP8に準拠しているか確認するには、テストのセクションで
紹介するスクリプトと共にチェッカーが利用できます。

https://pypi.python.org/pypi/pep8

テスト
^^^^^^^^^^^^^^^^

Ryuには幾つかの自動化されたテストが存在しますが、最も単純で多用されるものは
Ryuのみで完結するユニットテストです。
後述するパッチの送付の際には、加えた変更によってユニットテストの実行が
失敗しないことをあらかじめ確認してください。
また、新たに追加したソースコードについては、なるべくユニットテストを
記述することが望ましいでしょう。

.. rst-class:: console

::

   $ cd ryu/
   $ ./run_tests.sh

パッチを送る
----------------

機能の追加や、不具合の修正などでリポジトリのソースコードを変更する際には、
変更内容をパッチにした上で、メーリングリストに送ります。
変更内容については、あらかじめメーリングリストで議論されていると
望ましいでしょう。

.. NOTE::
   RyuのソースコードのリポジトリはGitHub上に存在しますが、
   プルリクエストを用いた開発プロセスではないことに注意してください。

送付するパッチの形式はLinuxカーネルの開発で使われるスタイルが想定されています。
このセクションでは、同スタイルのパッチをメーリングリストに送るまでの一例を
紹介していますが、より詳しくは関連するドキュメントを参照してください。

http://lxr.linux.no/linux/Documentation/SubmittingPatches

ソースコードをチェックアウトする
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

まずはRyuのソースコードをチェックアウトします。
GitHub上でソースコードをforkして自分の作業用リポジトリを作っても
構いませんが、単純にするためオリジナルをそのまま使った例になっています。

.. rst-class:: console

::

   $ git clone https://github.com/osrg/ryu.git
   $ cd ryu/

ソースコードに変更を加える
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Ryuのソースコードに必要な変更を加えます。
作業に区切りがついたら、変更内容をコミットしましょう。

.. rst-class:: console

::

   $ git commit -a

パッチを作る
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

変更内容の差分をパッチにします。
パッチには Signed-off-by: 行を付けることを忘れないでください。
この署名は、あなたが提出したパッチがオープンソース・ソフトウェアの
ライセンス上、問題ないことの宣言になります。

.. rst-class:: console

::

   $ git format-patch origin -s

パッチを送る
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

完成したパッチの内容が正しいことを確認した後に、メーリングリストに送ります。
お使いのメーラで直接送ることもできますがgit-send-email(1)を使うことで
対話的に扱うこともできます。

.. rst-class:: console

::

   $ git send-email 0001-sample.patch

応答を待つ
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

パッチに対する応答を待ちます。
そのまま取り込まれる場合もありますが、指摘事項などがあれば
内容を修正して再度送る必要があるでしょう。


